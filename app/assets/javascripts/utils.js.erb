//Array.isArray = Array.isArray || function(o) {
//  return typeof o === 'object' && Object.prototype.toString.call(o).slice(8, -1) === 'Array'
//};

// StackOverflow's implementation of String template: http://stackoverflow.com/a/18234317
// example:
//    '{target} is the one to be replaced'.formatUnicorn({target: 'replacement'})
//String.prototype.formatUnicorn = String.prototype.formatUnicorn || function() {
//  var e = this.toString();
//  if (!arguments.length) return e;
//  var t = typeof arguments[0],
//      n = "string" == t || "number" == t ? Array.prototype.slice.call(arguments) : arguments[0];
//  for (var i in n) e = e.replace(new RegExp("\\{" + i + "\\}", "gi"), n[i]);
//  return e;
//};

// parse query string from current URL into an object
// example:
//    params() => returns an object
//function params(str){
//    var query_str = str || window.location.search.slice(1),
//        params = {},
//        pairs = query_str.split('&');
//
//    for (var i = 0; i < pairs.length; i++) {
//      var pos = pairs[i].indexOf('=');
//      if (pos == -1) continue;
//      var name = decodeURIComponent(pairs[i].substring(0, pos)),
//          value = decodeURIComponent(pairs[i].substring(pos+1));
//      if (params[name]) {
//        if (Array.isArray(params[name])){
//          params[name].push(value);
//        } else {
//          params[name] = [params[name], value];
//        }
//      } else {
//        params[name] = value;
//      }
//    }
//  return params;
//}
