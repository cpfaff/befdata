/ head

// variables

// crate from fields from partial
- new_fields = j render(partial: 'role', locals: { role: { name: nil, id: [] } })

// define maximum allowed roles
- max_num = all_project_roles_for_select.length

/ body

// partial
= simple_form_for(@project) do |f|
  = f.error_notification
  %body
    %div
      %ul.nav.nav-tabs
        %li.nav-item
          %a.nav-link.active{"data-toggle" => "tab", :href => "#tab-1", :role => "tab"} Metadata
        %li.nav-item
          %a.nav-link{"data-toggle" => "tab", :href => "#tab-2", :role => "tab"} People
      .tab-content.equal-height
        #tab-1.tab-pane.active{:role => "tabpanel"}
          .container
            %br
            = field_set_tag "Basics" do
              = f.input :shortname,
                require: true,
                hint: "A short name for the project (e.g. z1, sp2, ...)"
              = f.input :name,
                require: true,
                hint: "A full name or title for the project."
              = f.input :description,
                hint: "A detailed description.",
                input_html: { rows: 10 }
              = f.input :comment,
                hint: "It is only visible to admins, and project board members!",
                input_html: { rows: 10 }
        #tab-2.tab-pane{:role => "tabpanel"}
          .container
            %br
            = field_set_tag "Members" do
              .text-justify.pb-4
                Here you can add all the users involved with the project
                and assign them to respecive roles. First select a role and then
                pick all users users who fill the particluar role. Note: You can only have
                unique roles, only one principle and one second principle investigator.
              #roles
                %noscript
                  %p
                    Please enable javascript and refresh the page to manage
                    membership.
                = render :partial => 'role', :collection => roles
              .pt-2
                #add_role.btn.btn-sm.btn-outline-success
                  = fa_icon('plus', text: "Add Role")
  .container
    .pt-5.pb-2
      - if @project.new_record?
        = link_to "<i class='fas fa-angle-double-left' vertical-align: middle;'></i> Back".html_safe, projects_path,
          { class: "btn btn-outline-primary" }
      - else
        = link_to "<i class='fas fa-angle-double-left' vertical-align: middle;'></i> Back".html_safe, project_path(@project),
          { class: "btn btn-outline-primary" }
      = f.button :submit, class: "btn btn-outline-primary", data: { disable_with: false }

/ modals

// warning about maximum roles
#maximum_roles.modal.fade
  .modal-dialog.modal-dialog-centered
    .modal-content
      / Modal Header
      .modal-header
        %h4.modal-title Note
        %button.close{"data-dismiss" => "modal", :type => "button"} ×
      / Modal body
      .modal-body
        You alredy reached the maximum number of roles.
      / Modal footer
      .modal-footer
        %button.btn.btn-outline-primary{"data-dismiss" => "modal", :type => "button"}
          Close

// warning about duplicate roles
#duplicate_roles.modal.fade
  .modal-dialog.modal-dialog-centered
    .modal-content
      / Modal Header
      .modal-header
        %h4.modal-title Note
        %button.close{"data-dismiss" => "modal", :type => "button"} ×
      / Modal body
      .modal-body
        You selected duplicated roles. Please remove or change.
      / Modal footer
      .modal-footer
        %button.btn.btn-outline-primary{"data-dismiss" => "modal", :type => "button"}
          Close

/ scripts

// handle roles
:javascript
  $(function(){
    // add a role
    $("#add_role").click(function(){
      if ($(".role").length < "#{max_num}")
      {
        $("#roles").append("#{new_fields}");
      }
      else {
        $('#maximum_roles').modal('show');
      }
      return(false);
    });

    $("form.edit_project, form.new_project").submit(function(e){
      var roles = $(this).find("select[name='roles[][type]']").map(function(){
        return $(this).val();
      });

      $.each(roles, function(i, v){
        if($.inArray(v, roles) != i) {
          $('#duplicate_roles').modal('show');
          e.preventDefault();
          return(false);
        }
      });
    })
  })

// set tabs to equal height
:javascript
  $(document).ready(function() {
    var maxHeight=0;
    $(".tab-content.equal-height .tab-pane").each(function(){
      $(this).addClass("active");
        var height = $(this).height();
        maxHeight = height>maxHeight?height:maxHeight;
        $(this).removeClass("active");
    });
    $(".tab-content .tab-pane:first").addClass("active");
    $(".tab-content").height(maxHeight);
  });


// activate the correct main navigation link
:javascript
  $(document).ready(function() {
    $('#navigation_projects_path').find('.nav-item').addClass('active');
  });
