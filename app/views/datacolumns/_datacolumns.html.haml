/ body

// filter for datacolumns
- if @datacolumns.present?
  %div.pb-1
    .font-weight-bold.text-dark
      Filter:

  %div.pb-3
    .input-group
      %input#filter_input_datacolumns.form-control{:placeholder => "Type..", :type => "text"}
      .input-group-append
        = link_to "Reset", "javascript:void(0)".html_safe,
          { class: "btn btn-outline-primary", id: "button_clear_datacolumns_filter",
          'data-toggle': "tooltip",
          'data-turbolinks': false,
          'title': "Clear Filter" ,
          'data-placement': "auto"}

  // cards with content
  #filter_target_datacolumns.card-columns.double
    - datacolumns.each do |column|
      .card.shadow-sm.mb-4
        .card-header
          .font-weight-bold.text-muted
            Dataset column
        .card-body
          %p.card-text
            .div.pb-3
              .font-weight-bold.text-dark
                Name:
              - if column.columnheader.present?
                .font-weight-normal.text-dark.text-justify
                  = column.columnheader
              - else
                .font-weight-normal.text-muted
                  No information available
            .div.pb-3
              .font-weight-bold.text-dark
                Definition:
              - if column.definition.present?
                .font-weight-normal.text-dark.text-justify
                  = column.definition
              - else
                .font-weight-normal.text-muted
                  No information available

            .div.pb-3
              .font-weight-bold.text-dark
                Unit:
              - if column.unit.present?
                .font-weight-normal.text-dark.text-justify
                  = column.unit
              - else
                .font-weight-normal.text-muted
                  No information available

            .div.pb-3
              .font-weight-bold.text-dark
                Datagroup:
              - if column.datagroup_id.present?
                .font-weight-normal.text-dark.text-justify
                  = link_to_if current_user, column.datagroup.title, column.datagroup
              - else
                .font-weight-normal.text-muted
                  No information available

            .div.pb-3
              .font-weight-bold.text-dark
                Keywords:
              - if column.tags.present?
                .font-weight-normal.text-dark.text-justify
                  = raw column.tags.map{|t| link_to t.name, keyword_path(t.id)}.join(", ")
              - else
                .font-weight-normal.text-muted
                  No information available

            .div.pb-3
              .font-weight-bold.text-dark
                Values:
              - if column.values_stored?
                %table#datacolumn_values.table.table-striped{ width: "100%"}
                  %thead
                    %tbody
                      - column.accepted_values(5).shuffle.each do |value|
                        %tr
                          %td
                            = value.accepted_value
              - else
                .font-weight-normal.text-muted
                  - if @dataset.can_be_edited_by? current_user
                    This column needs to be approved to display sample values. Click
                    = link_to 'here', approval_overview_datacolumn_path(column)
                    to start approving.
                  - else
                    Sample values are not displayed because this column hasn't been approved yet.

            .div.pb-3
              .font-weight-bold.text-dark
                Contributors:
              - u = column.users
              - unless u.blank? && column.acknowledge_unknown.blank?
                .font-weight-normal.text-dark.text-justify
                  %div
                    = (u.map{|p| link_to(p.short_name, p)} + [column.acknowledge_unknown]).compact.join(', ').html_safe
              - else
                .font-weight-normal.text-muted
                  No information available

        .card-footer.text-right
          - if @dataset.can_be_edited_by? current_user
            .disable_on_import
              %span{'data-toggle': 'tooltip', title: 'Approve datacolumn', 'data-placement': 'auto'}
                = link_to "<i class='fas fa-thumbs-up'></i>".html_safe, approval_overview_datacolumn_url(column),
                { class: "btn btn-sm btn-outline-light text-success" }
          - else
            %span{'data-toggle': 'tooltip', title: 'Approve datacolumn', 'data-placement': 'auto'}
              = link_to "<i class='fas fa-thumbs-up'></i>".html_safe, approval_overview_datacolumn_url(column),
              { class: "btn btn-sm btn-outline-light text-success disabled" }

- else
  .font-weight-normal.text-muted
    No information available

#filter_target_datacolumns_empty_note.d-none
  No information available

// filter the datacolumns
:javascript
  $(document).ready(function() {
    $('#filter_input_datacolumns').keyup(function (){
      $('.card').removeClass('d-none');
        var filter = $(this).val(); // get the value of the input, which we filter on
          $('#filter_target_datacolumns').find('.card .card-body:not(:contains("'+filter+'"))').parent().addClass('d-none');
          if (!$("#filter_target_datacolumns").find('.card').is(':visible')) {
            $("#filter_target_datacolumns_empty_note").removeClass('d-none');
          } else {
            $("#filter_target_datacolumns_empty_note").addClass('d-none');
          };
      });
    });

  $(document).ready(function() {
    $('#button_clear_datacolumns_filter').click(function(){
      $('#filter_input_datacolumns').each(function(){
        $(this).val('');
      });
      $('#filter_target_datacolumns').find('.card').removeClass('d-none');
      $("#filter_target_datacolumns_empty_note").addClass('d-none');
    });
  });

  $(document).ready(function() {
    $('.nav-link').click(function(){
      $('#filter_input_datacolumns').each(function(){
        $(this).val('');
        $('#filter_target_datacolumns').find('.card').removeClass('d-none');
        $("#filter_target_datacolumns_empty_note").addClass('d-none');
      });
    });
  });

// setup hover shadow on the cards
:javascript
  $(document).ready(function() {
    $( ".card" ).hover(
      function() {
        $(this).addClass('shadow').css('cursor', 'pointer');
      }, function() {
        $(this).removeClass('shadow');
      }
    );
  });
