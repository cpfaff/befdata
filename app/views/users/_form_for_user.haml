/ variables

// role form from partial
- role_form = j render :partial => "role", :locals => { role: { role_name: nil, project_id: nil }}

/ body

// form user
= simple_form_for @user, wrapper_mappings: { check_boxes: :vertical_collection, radio_buttons: :vertical_collection, file: :custom_file, boolean: :custom_boolean_switch } do |f|
  = f.error_notification
  %body
    %div
      %ul.nav.nav-tabs
        %li.nav-item
          %a.nav-link.active{"data-toggle" => "tab", :href => "#tab-1", :role => "tab"} Basics
        %li.nav-item
          %a.nav-link{"data-toggle" => "tab", :href => "#tab-2", :role => "tab"} Affiliation
        - if current_user.has_role?(:admin)
          %li.nav-item
            %a.nav-link{"data-toggle" => "tab", :href => "#tab-3", :role => "tab"} Projects
          %li.nav-item
            %a.nav-link{"data-toggle" => "tab", :href => "#tab-4", :role => "tab"} Extras
      .tab-content.equal-height
        #tab-1.tab-pane.active{:role => "tabpanel"}
          .container
            %br
            = field_set_tag "Profile" do
              = f.input :salutation, label: 'Title'
              = f.input :firstname, required: true
              = f.input :middlenames
              = f.input :lastname, required: true
              = image_tag @user.avatar.url(:small)
              // todo: add button to reset the avatar
              // add ajax based uploader to update the image tag with the selected image
              = f.input :avatar, as: :file, input_html: { id: 'avatar_imagefile' }
            = field_set_tag "Login" do
              = f.input :email, required: true
              = f.input :login, required: true
              = f.input :password, required: true
              = f.input :password_confirmation, required: true
            - if current_user
              - if current_user.has_role?(:admin)
                = field_set_tag "Roles" do
                  %div.pl-2
                    = f.input :project_board, as: :boolean
                    = f.input :admin, as: :boolean
                    = f.input :data_admin, as: :boolean
                    = f.input :alumni, as: :boolean
            = field_set_tag "Notifications" do
              %div.pl-2
                = f.input :receive_emails
        #tab-2.tab-pane{:role => "tabpanel"}
          .container
            %br
            = field_set_tag "Institution" do
              = f.input :institution_name
              = f.input :institution_url, as: :url
              = f.input :institution_phone, as: :tel
              = f.input :institution_fax, as: :tel
              = f.input :street
              = f.input :city
              = f.input :country, as: :text
        - if current_user.has_role?(:admin)
          #tab-3.tab-pane{:role => "tabpanel"}
            .container
              %br
              = field_set_tag "Associate to project" do
                #roles
                  %noscript
                    %p You need javascript enabled to manage user roles. Please enable javascript and refresh page.
                  = render :partial => 'role', collection: project_roles
                #btn_add_role.btn.btn-sm.btn-outline-success
                  = fa_icon('plus', text: "Add Project")
          #tab-4.tab-pane{:role => "tabpanel"}
            .container
              %br
              = field_set_tag "Administrative" do
                = f.input :comment, hint: "Only admins and the project board can see this comment.", input_html: { rows: 10 }

  .container
    %div.pt-5.pb-2
      - if @user.new_record?
        = link_to "<i class='fas fa-angle-double-left' vertical-align: middle;'></i> Back".html_safe, users_path,
          { class: "btn btn-outline-primary" }
      - else
        = link_to "<i class='fas fa-angle-double-left' vertical-align: middle;'></i> Back".html_safe, user_path(@user),
          { class: "btn btn-outline-primary" }
      = f.button :submit, class: "btn btn-outline-primary"


/ scripts

// append a role form
:javascript
  $("#btn_add_role").click(function(){
    $("#roles").append("#{role_form}");
    return(false);
  })

// set tabs to equal height
:javascript
  $(document).ready(function() {
    var maxHeight=0;
    $(".tab-content.equal-height .tab-pane").each(function(){
      $(this).addClass("active");
        var height = $(this).height();
        maxHeight = height>maxHeight?height:maxHeight;
        $(this).removeClass("active");
    });
    $(".tab-content.equal-height .tab-pane:first").addClass("active");
    $(".tab-content.equal-height").height(maxHeight);
  });

// workaround for displaying selected file
:javascript
  $('.custom-file-input').change(function(e){
    var fileName = e.target.files[0].name;
    $(`.custom-file-label[for=${e.currentTarget['id']}]`).html(fileName);
  });
